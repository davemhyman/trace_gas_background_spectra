'''
This script draws background spectrum samples by the NORTA correlated
random vector samples for the all seasons and 5x5 degree grids.
'''
import os
import numpy as np
import matplotlib.pyplot as plt
from netCDF4 import Dataset
import time
import itertools
import sys
sys.path.append('/home/dhyman/py_testing')
from norta_bb import *

# 1300 cm^-1 --> wnum_mw[146]
# 1410 cm^-1 --> wnum_mw[322]
sample = np.arange(146,322+1)
m = len(sample)
lons = np.arange(175,155,-5)
lats = np.arange(85, 40,-5)
season_def_list = ['fall = [22 Sept. - 21 Dec.)']
'''
,
    'winter = [21 Dec. - 20 Mar.)',
    'spring = [20 Mar. - 21 Jun.)',
    'summer = [21 Jun. - 22 Sept.)']
'''
seasons = [s[:4] for s in season_def_list]
sign = lambda a: '+' if a>=0 else '-' if a<0 else 0

tol_dist = 1e-5
tol_corr = 5e-5
N_uv = 200
N_s = 10000
max_iters = 15

os.chdir('/data/dhyman/CrIS_bg_spectra')
print('START TIME:')
print time.ctime(time.time())
T0 = time.time()
for id in itertools.product(lons,lats,seasons):
    lon = id[0]
    lat = id[1]
    seas = id[2]
    lonstr = 'lon=' + sign(lon) + '{n:03d}'.format(n = abs(lon))
    latstr = 'lat=' + sign(lat) + '{n:02d}'.format(n = abs(lat))
    bin  = seas + '.' + lonstr + '.' + latstr + '.nc'
    file = 'CrIS.bg.spectra.' + bin
    if not os.path.isfile(file):
        print('#')
        print('#')
        print('-------------------------------------------------')
        print('-------------------------------------------------')
        print('-------------------------------------------------')
        print('-------------------------------------------------')
        print('-------------------------------------------------')
        print('PROCESSING PARTITION:')
        print bin
        print('---------------------')
        print('#')
        print('#')
        print('#')
        print('#')
        fC= 'CrIS.bg.mw_cov.' + bin
        fM= 'CrIS.bg.mw_marginal_dist.' + bin
        os.chdir('/data/dhyman/CrIS_bg_cov')
        fileC = Dataset(fC,'r')
        cov = fileC['cov_mw'][:]
        wnum_mw = fileC['wnum_mw'][:]
        fileC.close()
        os.chdir('/data/dhyman/CrIS_bg_marginal_dist')
        fileM = Dataset(fM,'r')
        BT_mw = fileM['BT_mw'][:]
        PDF = fileM['PDF'][:]
        CDF = fileM['CDF'][:]
        fileM.close()
        wavenumbers = wnum_mw[sample]
        values  = BT_mw[sample,:]
        marginal_pdf  = PDF[sample,:]
        marginals = CDF[sample,:]
        dvalues = np.diff(values, axis=-1)[:,0]
        marginal_mean = np.sum(marginal_pdf * (values + (1./2.)*dvalues[:,None]) * dvalues[:,None],axis = -1)
        marginal_var = np.sum(marginal_pdf * (values**2 + values*dvalues[:,None] + (1./3.)*dvalues[:,None]**2) * dvalues[:,None],axis = -1) - marginal_mean**2
        covariance = cov[sample[0]:sample[-1]+1,sample[0]:sample[-1]+1]
        covariance = covariance - np.diag(np.diag(covariance)) + np.diag(marginal_var)
        bg_spectra,cov_Z,errors,iter = NORTA_sample(values,marginals,marginal_pdf,covariance,N_s,tol_dist,tol_corr,N_uv,max_iters)
        os.chdir('/data/dhyman/CrIS_bg_spectra')

        ############################################################################
        ############################################################################
        # GENERATE NETCDF FILE
        print('-------------------------------------------------')
        print('GENERATING NETCDF FILE:')
        print(file)
        dataset = Dataset(file, 'w')
        # DIMENSIONS
        n_wnum = dataset.createDimension('wnum', m)
        n_samples = dataset.createDimension('samples', N_s)
        nchar = dataset.createDimension('str_dim', 1)
        bin_ends = dataset.createDimension('bin_ends', 2)
        # VARIABLES
        samples = dataset.createVariable('bg_spectral_samples',np.float32, ('samples','wnum'))
        norta_cov = dataset.createVariable('norta_cov',np.float32, ('wnum','wnum'))
        wnum = dataset.createVariable('wnum',np.float32, ('wnum',))
        err_corr = dataset.createVariable('CPCE',np.float32) # Channel Pair Correlation Error
        err_dist = dataset.createVariable('CMDE',np.float32) # Channel Marginal Distribution Error
        bin_season = dataset.createVariable('bin_season',str, ('str_dim',))
        bin_latitude = dataset.createVariable('bin_latitude',np.int16, ('bin_ends',))
        bin_longitude = dataset.createVariable('bin_longitude',np.int16, ('bin_ends',))
        # GLOBAL ATTRIBUTES
        dataset.description = 'Correlated background spectral samples conforming to ' \
            + 'the measured channel marginal distribution and covariance matrix ' \
            + 'generated by the NORTA (NORmal To Anything) procedure for non-normal marginals.' \
            + 'These sample cover SO2 - free background brightness temperature spectra representing ' \
            +'a 5 deg latitude x 5 deg longitude x season binning.'
        dataset.history = 'Created ' + time.ctime(time.time())
        # VARIABLE ATTRIBUTES
        samples.units = 'K'
        norta_cov.units = 'none'
        err_corr.units = 'Error per channel'
        err_dist.units = 'Error per channel pair'
        wnum.units = 'cm^-1'
        bin_latitude.units = 'degree_north'
        bin_longitude.units = 'degree_east'
        samples.description = 'NORTA - derived correlated random spectrum samples'
        norta_cov.description = 'NORTA - derived multivariate standard normal covariance'
        wnum.description = 'CrIS FSR midwave wavenumbers used in sample'
        err_corr.description = 'Channel Pair Correlation coefficient Error per channel pair'
        err_dist.description = 'Channel Marginal Distribution Error - L2 mean value norm on each channel'
        bin_season.description = 'right half-open time (seasonal) interval'
        bin_latitude.description = 'right half-open latitude interval'
        bin_longitude.description = 'right half-open longitude interval'
        # ADD VALUES TO VARIABLES
        sidx = [season_def_list.index(i) for i in season_def_list if seas in i][0]
        season_def_str = season_def_list[sidx]
        str_out = np.array([season_def_str], dtype='object')
        #
        samples[:] = np.float32(bg_spectra)
        norta_cov[:] = np.float32(cov_Z)
        wnum[:] = np.float32(wavenumbers)
        err_corr[:] = np.float32(errors[0])
        err_dist[:] = np.float32(errors[1])
        bin_season[:] = str_out
        bin_latitude[:] = np.array([lat, lat+5])
        bin_longitude[:] = np.array([lon, lon+5])
        # WRITE FILE
        dataset.close()
    ############################################################################
    ############################################################################
    ############################################################################
    ############################################################################

T1 = time.time()
ttot = T1-T0
hrs = int(ttot/3600)
mins = int((ttot/3600-hrs)*60)
secs = (ttot/60 - hrs*60 - mins)*60
time.ctime(time.time())

print('#')
print('#')
print('#')
print('#')
print('#')
print('#')
print('-------------------------------------------------')
print('-------------------------------------------------')
print('-------------------------------------------------')
print('TOTAL ELASPED TIME FOR ALL PARTITIONS:')
print '{nh} hours, {nm} minutes, {ns:.3f} seconds'.format(nh = hrs, nm = mins, ns = secs)
print('END TIME:')
print time.ctime(time.time())
print('-------------------------------------------------')
print('-------------------------------------------------')
